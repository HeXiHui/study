js语言执行环境是“单线程”。只能一次完成一个任务。多个任务就会形成任务队列，一个个按顺序执行。这种模式好处是简单，缺点是耗时长。为解决这个问题，js语言将任务的执行模式分为两种：同步和异步
（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。

（2）主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。

（3）一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。

（4）主线程不断重复上面的第三步。
异步编程4种方法：
   1.回调函数：异步编程最基本的方法
                     例子： function f1(callback){
                                               setTimeout(function(){//f1代码
                                                                               callback()},1000)}
                                 f1(f2)
                     采用这种方法，能把同步变异步，f1不会堵塞进程，相当于先执行程序的主要逻辑，将耗时操作推迟执行
                     优点：简单
                     缺点：不利于代码的阅读和维护，各个部分之间高度耦合，流程混乱，而且每个任务只能指定一个回调函数。
   2.事件监听
       原理：事件监听是采用事件驱动模式，任务执行顺序不取决于代码顺序，而取决于事件是否发生。
       例子：f1.on('done',f2)
                 function f1(){
                                    setTimeout(function(){
                                                      //f1的任务代码
                                                      f1.trigger('done');//执行完后，立即触发done事件，从而开始执行f2
                                                         },1000)}
     优点：简单容易理解，可以绑定钓具回调函数。而且可以去耦合，有用利于模块化。
     缺点：整个程序都变成事件驱动，运行流程会变得不清晰
  3.发布、订阅
    原理：假定有一个‘信号中心’，某个任务执行完成后就向信号中心‘发布’一个信号，其他的任务可以向信号中心订阅这个信    号。从而知道什么时候可以开始执行。这就叫做：‘发布、订阅模式’，又称：‘观察者模式’
     例子：JQuery.subscribe('done',f2)//首先f2向信号中心‘JQuery’订阅‘done’信号
              f1改写：function f1(){
                                            setTimeout(function(){
                                                                     //f1代码
                                                                     JQuery.publish('done')//f1执行后向信号中心发布‘done’信号，从而引起f2的执行
                                                                   },1000)}
             JQuery.unsubscribe('done',f2)//f2执行完后，也可以取消订阅

  4.Promise对象
    Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。
    原理：每一个异步任务返回一个Promise对象，该对象有一个then方法，能指定回调函数。
    例子：f1().then(f2).then(f3)