执行环境
      概念：执行环境定义了变量和函数有权使用的其它数据，决定了它们各自的行为。而每个执行环境都有一个与之对应的变                量对象，环境中定义的变量和函数都保存在这个对象中。
      运行过程：
                    1.预编译期：会对var和function的声明在其所在的域内进行提升
                      注意：
                              -预编译首先是全局预编译，函数在未调用时不进行编译
                              -只有var和function声明会提升
                              -在所在的作用内提升，不会提升到其它的作用域
                              -预编译后按顺序执行
                    
Event Loop
    主线程从“任务队列”中读取事件，这个过程是循环不断的，所以整个运行机制又称为Event loop(事件循环)
    主线程运行时，产生堆和栈，栈中的代码调用各种外部API，它们在“任务队列”中加入各种事件。只要栈中的代码执行完毕    ，主线程就会去读取“任务队列”，依次执行那些事件所对应的回调函数。

Node.js的 Event Loop
    Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。
    运行机制如下：
                         1.v8引擎先解析js脚本
                         2.解析后的代码调用node API
                         3.libuv库负责node API的执行，它将不同的任务分配给不同的线程，形成一个Event Loop,以异步的方式返                           回任务执行的结果给v8引擎
                         4.v8引擎再将结果返回给用户
   除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与"任务队列"有关的方法：process.nextTick和    setImmediate。
   process.nextTick和setImmediate的一个重要区别：
      多个process.nextTick语句总是在当前"执行栈"一次执行完，多个   setImmediate可能则需要多次loop才能执行完。由于      process.nextTick指定的回调函数是在本次"事件循环"触发，而setImmediate指定的是在下次"事件循环"触发，所以很显       然，前者总是比后者发生得早，而且执行效率也高（因为不用检查"任务队列"）。